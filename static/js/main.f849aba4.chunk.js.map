{"version":3,"sources":["images sync nonrecursive //.(png|jpe?g|svg)$","images/ABCbackground.jpg","images/Elmo1.png","images/Elmo10.png","images/Elmo11.png","images/Elmo12.png","images/Elmo2.png","images/Elmo3.png","images/Elmo4.png","images/Elmo5.png","images/Elmo6.png","images/Elmo7.png","images/Elmo8.png","images/Elmo9.png","images/background.jpg","components/FriendCard/index.js","components/Container/index.js","components/Navbar/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","images","r","item","index","replace","importAll","require","FriendCard","props","className","alt","name","src","image","onClick","clickCharacter","Container","children","Navbar","style","fontWeight","message","score","topScore","Header","Footer","href","App","state","characters","clicked","character","setState","console","log","this","key","sort","Math","random","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f849aba4.chunk.js","sourcesContent":["var map = {\n\t\"./ABCbackground.jpg\": 16,\n\t\"./Elmo1.png\": 17,\n\t\"./Elmo10.png\": 18,\n\t\"./Elmo11.png\": 19,\n\t\"./Elmo12.png\": 20,\n\t\"./Elmo2.png\": 21,\n\t\"./Elmo3.png\": 22,\n\t\"./Elmo4.png\": 23,\n\t\"./Elmo5.png\": 24,\n\t\"./Elmo6.png\": 25,\n\t\"./Elmo7.png\": 26,\n\t\"./Elmo8.png\": 27,\n\t\"./Elmo9.png\": 28,\n\t\"./background.jpg\": 29\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","module.exports = __webpack_public_path__ + \"static/media/ABCbackground.e387d51e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Elmo1.7ed41b4b.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo10.7def0b0b.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo11.6ed77b96.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo12.91b8ec6b.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo2.c74a1371.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo3.d8d9d006.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo4.0ad1ec30.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo5.7240c7c2.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo6.d53cae0e.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo7.42f8f339.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo8.e3f35a90.png\";","module.exports = __webpack_public_path__ + \"static/media/Elmo9.01e64d94.png\";","module.exports = __webpack_public_path__ + \"static/media/background.6ed66496.jpg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction importAll(r) {\n  let images = {};\n  r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\n  return images;\n}\nconst images = importAll(require.context('../../images', false, /\\.(png|jpe?g|svg)$/));\n\n// Credit to https://stackoverflow.com/questions/42118296/dynamically-import-images-from-a-directory-using-webpack\n// for this great function to import all my images and Kathy TA for finding it! \n\nfunction FriendCard(props) {\n  return (\n    <div className=\"click-image\">\n        <img alt={props.name} src={images[props.image]} onClick={() => props.clickCharacter(props.id)}\n        />\n      </div>\n  )}\n\n  export default FriendCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return <div className=\"navbar sticky-top\">\n      <ul>\n          <li className='brand' style={{fontWeight:800}}>Clicky Elmo</li>\n          <li>{props.message}</li>\n          <li>Score:{props.score} | Top Score:{props.topScore}</li>\n      </ul>\n\n  </div>;\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return <div className=\"header\">\n      <div className='header-text'>\n      <h1>Clicky Elmo</h1>\n      <h3>Click on an image to earn points, but don't click on any more than once!</h3>\n      </div>\n  </div>;\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return <div className=\"navbar fixed-bottom\">\n      <h5>Clicky Elmo!</h5>\n      <h5 className=\"author\">Built By: <a href='https://github.com/r-andrew-dev'>Rachael Andrew</a></h5>\n  </div>;\n}\n\nexport default Footer;","import React, {\n  Component\n} from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Container from \"./components/Container\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\"\nimport characters from \"./characters.json\";\n\n// PSEDUO CODING PSUEDO CODING PSEDUO CODING \n\n// My ideas: set score in state, \n// then using onClick function handler, whenever a character is clicked, \n// add 1 to score and shuffleArray() unless clicked: is already true, then check if top score or score is greater. \n// if Score is greater, set Top Score = Score, and then score = 0, and \"clicked\", back to false, run shuffleArray(). Else, Top Score stays score and \n// Score is still reset to zero and all clicked back to false again run shuffle array.\n// * add \"clicked\" property to characters. Would this work? \n\n// How to randomly render when clicked? \n// Fisher Yates aka Knuth shuffle ?\n// Durstenfeld shuffle ? \n// https://stackoverflow.com/questions/38101522/how-to-render-random-objects-from-an-array-in-react\n\n// function shuffleArray(characters) {\n//   let i = characters.length - 1;\n//   for (; i > 0; i--) {\n//     const j = Math.floor(Math.random() * (i + 1));\n//     const temp = characters[i];\n//     characters[i] = characters[j];\n//     characters[j] = temp;\n//   }\n//   return characters;\n// }\n\n// characters.sort(() => Math.random() > 0.5) THANKS KATHY\n\n// PSUEDO CODING PSEDUO CODING PSUEDO CODING \n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    message: \"Click an image to begin!\"\n  };\n\n  clickCharacter = id => {\n\n    if (!this.state.characters[id].clicked && this.state.score < 11) {\n      let characters = this.state.characters.map(character => {\n        if (character.id === id) {\n          character.clicked = true;\n        }\n        return character\n      })\n      this.setState({\n        score: this.state.score + 1,\n        characters: characters,\n        message: \"You got it right!\"\n      })\n      console.log(characters)\n    } else if (!this.state.characters[id].clicked && this.state.score === 11) {\n\n      let characters = this.state.characters.map(character => {\n        character.clicked = false\n        return character\n      })\n\n      this.setState({\n        characters,\n        score: 0,\n        topScore: 0,\n        message: \"Congratulations! You win!\"\n      });\n      console.log(characters)\n    } else {\n      if (this.state.topScore < this.state.score) {\n\n        let topScore = this.state.score\n\n        this.setState({\n          topScore: topScore\n        })\n      } else {\n        this.setState({\n          topScore: this.state.topScore\n        })\n      }\n\n     let characters = this.state.characters.map(character => {\n        character.clicked = false\n        return character\n      })\n\n      this.setState({\n        characters: characters,\n        score: 0,\n        message: \"You Lost. Try again?\"\n      });\n    }\n  }\n\n// Map over this.state.friends and render a FriendCard component for each friend object\nrender() {\n  return (\n    <div>\n    <Navbar\n    score={this.state.score}\n    topScore={this.state.topScore}\n    message={this.state.message}\n    />\n    <Header/>\n    <Container>\n      {this.state.characters.map(character => (\n        <FriendCard\n          clickCharacter={this.clickCharacter} \n          id={character.id}\n          key={character.id}\n          name={character.name}\n          image={character.image}\n        />\n      )).sort(()=> Math.random() - .5)}\n    </Container>\n    <Footer/>\n  </div>\n  )\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}